using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

using var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("SchemaCollectionGenerator.SchemaCollections.yaml");
using var reader = new StreamReader(stream!);

var deserializer = new DeserializerBuilder()
	.WithNamingConvention(CamelCaseNamingConvention.Instance)
	.Build();
var schemaCollections = deserializer.Deserialize<List<Schema>>(reader);

using var writer = new StreamWriter(@"..\..\..\..\..\src\MySqlConnector\Core\SchemaProvider.g.cs");
writer.Write(@"// DO NOT EDIT - generated by SchemaCollectionGenerator.cs
#nullable enable
using MySqlConnector.Protocol.Serialization;
using MySqlConnector.Utilities;

namespace MySqlConnector.Core;

internal sealed partial class SchemaProvider
{
	public async ValueTask<DataTable> GetSchemaAsync(IOBehavior ioBehavior, string collectionName, CancellationToken cancellationToken)
	{
		if (collectionName is null)
			throw new ArgumentNullException(nameof(collectionName));

		var dataTable = new DataTable(collectionName);
");
string elseIf = "if";
foreach (var schema in schemaCollections)
{
	writer.Write(@$"		{elseIf} (string.Equals(collectionName, ""{schema.Name}"", StringComparison.OrdinalIgnoreCase))
			await Fill{schema.Name}Async(ioBehavior, dataTable, cancellationToken).ConfigureAwait(false);
");
	elseIf = "else if";
}
writer.Write(@"		else
			throw new ArgumentException(""Invalid collection name: '"" + collectionName + ""'."", nameof(collectionName));

		return dataTable;
	}

");

foreach (var schema in schemaCollections)
{
	var isAsync = schema.Table is not null;
	writer.Write($@"	private {(isAsync ? "async " : "")}Task Fill{schema.Name}Async(IOBehavior ioBehavior, DataTable dataTable, CancellationToken cancellationToken)
	{{
		dataTable.Columns.AddRange(new DataColumn[]
		{{
");
	foreach (var column in schema.Columns)
	{
		writer.Write($@"			new(""{column.Name}"", typeof({column.Type})),
");
	}
	writer.Write($@"		}});

");
	if (schema.Table is string table)
	{
		writer.Write(@$"		await FillDataTableAsync(ioBehavior, dataTable, ""{table}"", cancellationToken).ConfigureAwait(false);");
	}
	else if (schema.Name == "MetaDataCollections")
	{
		foreach (var schemaCollection in schemaCollections)
		{
			writer.Write($@"		dataTable.Rows.Add(""{schemaCollection.Name}"", 0, 0);
");
		}
	}
	else
	{
		writer.Write(@$"		{schema.Custom}(dataTable);
");
	}

	if (!isAsync)
	{
		writer.Write(@"
		return Utility.CompletedTask;");
	}

	writer.Write(@"
	}

");
}

writer.Write(@"}
");

class Schema
{
	[AllowNull]
	public string Name { get; set; }
	public string? Custom { get; set; }
	public string? Table { get; set; }
	[AllowNull]
	public List<Column> Columns { get; set; }
}

class Column
{
	[AllowNull]
	public string Name { get; set; }
	[AllowNull]
	public string Type { get; set; }
	public bool Optional { get; set; }
}
